#include "bls_test.h"
#include <ctime>
#include<windows.h>

//BLS curve, ate pairing embedding degree 24, ideal for security level AES-256
BYTE byte_g1[256] = {
	//g_1
	 0x00, 0x07, 0x80, 0xDE, 0xE2, 0x94, 0x52, 0x89, 0x82, 0xED, 0xA6, 0x64, 0xBA, 0xD5, 0x69, 0x77,
	 0xFE, 0xCC, 0x0D, 0x42, 0xA3, 0x30, 0x41, 0xAE, 0x68, 0x62, 0xDD, 0x9B, 0x18, 0xA1, 0x77, 0x7B,
	 0x70, 0x5A, 0x92, 0x8D, 0xD8, 0x71, 0xBB, 0x0C, 0x92, 0x99, 0x10, 0xA9, 0xEF, 0x8C, 0xDB, 0x1A,
	 0x6C, 0xDF, 0xB4, 0x2B, 0x08, 0x69, 0x21, 0xD9, 0x4B, 0xCA, 0xB7, 0xB1, 0x57, 0x19, 0x12, 0x18,
	 0x36, 0x10, 0x14, 0x25, 0x74, 0x16, 0x64, 0x05, 0x1A, 0xAF, 0x8E, 0x25, 0x9B, 0x55, 0x3B, 0x0F,
	 0x00, 0x07, 0xBF, 0x43, 0x21, 0xA8, 0xAF, 0x2E, 0xF4, 0xEF, 0xC4, 0x25, 0xD9, 0x8A, 0x49, 0x79,
	 0x79, 0x2A, 0x07, 0x81, 0xC9, 0x4D, 0x32, 0xEF, 0x30, 0xE7, 0x8F, 0xE7, 0xFA, 0xA6, 0xDF, 0x1F,
	 0xEB, 0x0E, 0x4A, 0x55, 0xFB, 0x95, 0xF5, 0xE1, 0x58, 0x68, 0x9C, 0x3B, 0x96, 0xEA, 0x6E, 0x5B,
	 0xEA, 0x95, 0x44, 0x1D, 0x8D, 0xA5, 0x32, 0xC6, 0xF3, 0x24, 0x59, 0x44, 0xE2, 0x24, 0x73, 0x7C,
	 0xC5, 0x73, 0xFF, 0x12, 0x37, 0x27, 0x22, 0xAC, 0xDA, 0x79, 0x48, 0x34, 0x02, 0x78, 0x97, 0xBA
};
BYTE byte_g2[640] = {
	//g_2
	 0x00, 0x06, 0xF3, 0x3B, 0x00, 0xF5, 0xB9, 0x8B, 0xCE, 0x6A, 0xBE, 0x95, 0x80, 0x1E, 0x2D, 0xF9,
	 0xDC, 0xA3, 0x56, 0xF9, 0x9A, 0x27, 0x6C, 0xBE, 0x54, 0x55, 0x84, 0x1E, 0xDD, 0xDA, 0xB0, 0x85,
	 0x04, 0xA6, 0x11, 0xAD, 0xC7, 0x5E, 0x0B, 0x7D, 0x4C, 0xC7, 0x17, 0x70, 0xBD, 0x3C, 0xF2, 0x7C,
	 0x03, 0xC1, 0xED, 0x01, 0x98, 0x22, 0x26, 0xE2, 0x19, 0x6E, 0xF7, 0x25, 0x33, 0xF1, 0x1A, 0x48,
	 0x02, 0x05, 0x31, 0x4E, 0xFA, 0x43, 0xD1, 0xFB, 0x78, 0x58, 0x02, 0xF5, 0x97, 0x40, 0x8C, 0xB0,
	 0x00, 0x06, 0xF3, 0x3B, 0x00, 0xF5, 0xB9, 0x8B, 0xCE, 0x6A, 0xBE, 0x95, 0x80, 0x1E, 0x2D, 0xF9,
	 0xDC, 0xA3, 0x56, 0xF9, 0x9A, 0x27, 0x6C, 0xBE, 0x54, 0x55, 0x84, 0x1E, 0xDD, 0xDA, 0xB0, 0x85,
	 0x04, 0xA6, 0x11, 0xAD, 0xC7, 0x5E, 0x0B, 0x7D, 0x4C, 0xC7, 0x17, 0x70, 0xBD, 0x3C, 0xF2, 0x7C,
	 0x03, 0xC1, 0xED, 0x01, 0x98, 0x22, 0x26, 0xE2, 0x19, 0x6E, 0xF7, 0x25, 0x33, 0xF1, 0x1A, 0x48,
	 0x02, 0x05, 0x31, 0x4E, 0xFA, 0x43, 0xD1, 0xFB, 0x78, 0x58, 0x02, 0xF5, 0x97, 0x40, 0x8C, 0xB0,
	 0x00, 0x12, 0x59, 0x74, 0x1E, 0xAE, 0x60, 0x71, 0x35, 0x9E, 0xFA, 0x5C, 0x11, 0xD5, 0x4D, 0xFC,
	 0xFE, 0x0A, 0xAE, 0x46, 0x59, 0xE4, 0x10, 0xE9, 0x14, 0x4E, 0x16, 0xD7, 0x8D, 0xD8, 0x73, 0xE6,
	 0xD7, 0x8A, 0xF1, 0xF7, 0x49, 0xF8, 0xC7, 0x54, 0x88, 0x8D, 0xCF, 0xDD, 0xD7, 0x70, 0x35, 0xE5,
	 0xA2, 0x62, 0x25, 0x3A, 0xD9, 0xB3, 0xB2, 0xC0, 0x93, 0xCD, 0x16, 0x17, 0xFD, 0xAD, 0x81, 0x8B,
	 0x8D, 0xF2, 0xAD, 0x3F, 0xD0, 0xA5, 0x07, 0x24, 0x51, 0xAE, 0x6A, 0x3C, 0xF4, 0xF4, 0xD9, 0xC6,
	 0x00, 0x12, 0x59, 0x74, 0x1E, 0xAE, 0x60, 0x71, 0x35, 0x9E, 0xFA, 0x5C, 0x11, 0xD5, 0x4D, 0xFC,
	 0xFE, 0x0A, 0xAE, 0x46, 0x59, 0xE4, 0x10, 0xE9, 0x14, 0x4E, 0x16, 0xD7, 0x8D, 0xD8, 0x73, 0xE6,
	 0xD7, 0x8A, 0xF1, 0xF7, 0x49, 0xF8, 0xC7, 0x54, 0x88, 0x8D, 0xCF, 0xDD, 0xD7, 0x70, 0x35, 0xE5,
	 0xA2, 0x62, 0x25, 0x3A, 0xD9, 0xB3, 0xB2, 0xC0, 0x93, 0xCD, 0x16, 0x17, 0xFD, 0xAD, 0x81, 0x8B,
	 0x8D, 0xF2, 0xAD, 0x3F, 0xD0, 0xA5, 0x07, 0x24, 0x51, 0xAE, 0x6A, 0x3C, 0xF4, 0xF4, 0xD9, 0xC6,
	 0x00, 0x13, 0xB5, 0x7C, 0x4E, 0xE8, 0x5D, 0xEB, 0xC9, 0x62, 0xF4, 0x66, 0x69, 0x01, 0x40, 0x36,
	 0xF6, 0xEF, 0x3B, 0xE4, 0x23, 0x4C, 0x25, 0xF3, 0x2A, 0xB1, 0xEB, 0x0E, 0x64, 0xCA, 0xF9, 0xF0,
	 0x6D, 0xD1, 0xCC, 0xEA, 0x3E, 0x30, 0x5B, 0x53, 0xF3, 0x18, 0x67, 0x53, 0x69, 0xBD, 0x4A, 0x9A,
	 0xAA, 0x58, 0x0C, 0xF6, 0x47, 0xD0, 0x45, 0x54, 0xC4, 0xFE, 0xDA, 0x8C, 0xEF, 0x31, 0x10, 0x5E,
	 0x42, 0x3F, 0xDA, 0x6A, 0x32, 0xA1, 0x94, 0xC7, 0x47, 0x32, 0xB1, 0x08, 0xE2, 0xC9, 0x33, 0xBB,
	 0x00, 0x13, 0xB5, 0x7C, 0x4E, 0xE8, 0x5D, 0xEB, 0xC9, 0x62, 0xF4, 0x66, 0x69, 0x01, 0x40, 0x36,
	 0xF6, 0xEF, 0x3B, 0xE4, 0x23, 0x4C, 0x25, 0xF3, 0x2A, 0xB1, 0xEB, 0x0E, 0x64, 0xCA, 0xF9, 0xF0,
	 0x6D, 0xD1, 0xCC, 0xEA, 0x3E, 0x30, 0x5B, 0x53, 0xF3, 0x18, 0x67, 0x53, 0x69, 0xBD, 0x4A, 0x9A,
	 0xAA, 0x58, 0x0C, 0xF6, 0x47, 0xD0, 0x45, 0x54, 0xC4, 0xFE, 0xDA, 0x8C, 0xEF, 0x31, 0x10, 0x5E,
	 0x42, 0x3F, 0xDA, 0x6A, 0x32, 0xA1, 0x94, 0xC7, 0x47, 0x32, 0xB1, 0x08, 0xE2, 0xC9, 0x33, 0xBB,
	 0x00, 0x02, 0xDE, 0xDF, 0xB3, 0x82, 0x73, 0xAB, 0x7F, 0x6E, 0x9C, 0xC6, 0xAA, 0xAC, 0x7D, 0xA9,
	 0x2D, 0x3B, 0x6B, 0xAD, 0x75, 0xAA, 0x6E, 0x7A, 0x47, 0x53, 0xCC, 0xBA, 0x36, 0x8E, 0xB1, 0xC0,
	 0xC8, 0xA5, 0x06, 0x28, 0x60, 0xFC, 0x9B, 0x95, 0x4C, 0x21, 0x3B, 0x3D, 0xEF, 0xD1, 0x45, 0xF4,
	 0x41, 0x5C, 0x12, 0xD7, 0x87, 0x3B, 0xBF, 0x77, 0x73, 0xBC, 0x88, 0x73, 0xEB, 0xD2, 0xB1, 0xEE,
	 0x8F, 0x77, 0x11, 0x72, 0x18, 0x2A, 0x67, 0xF2, 0xF8, 0xF9, 0x75, 0xDF, 0xE8, 0xBD, 0x9E, 0x50,
	 0x00, 0x02, 0xDE, 0xDF, 0xB3, 0x82, 0x73, 0xAB, 0x7F, 0x6E, 0x9C, 0xC6, 0xAA, 0xAC, 0x7D, 0xA9,
	 0x2D, 0x3B, 0x6B, 0xAD, 0x75, 0xAA, 0x6E, 0x7A, 0x47, 0x53, 0xCC, 0xBA, 0x36, 0x8E, 0xB1, 0xC0,
	 0xC8, 0xA5, 0x06, 0x28, 0x60, 0xFC, 0x9B, 0x95, 0x4C, 0x21, 0x3B, 0x3D, 0xEF, 0xD1, 0x45, 0xF4,
	 0x41, 0x5C, 0x12, 0xD7, 0x87, 0x3B, 0xBF, 0x77, 0x73, 0xBC, 0x88, 0x73, 0xEB, 0xD2, 0xB1, 0xEE,
	 0x8F, 0x77, 0x11, 0x72, 0x18, 0x2A, 0x67, 0xF2, 0xF8, 0xF9, 0x75, 0xDF, 0xE8, 0xBD, 0x9E, 0x50
};
BYTE byte_gt[1920] = {
	//g_t
	0x00, 0x05, 0x8D, 0xA8, 0xA8, 0x8B, 0x05, 0x4D, 0xF2, 0x5D, 0x42, 0x91, 0x5A, 0x17, 0x1D, 0x46,
	0xCB, 0x27, 0xEE, 0x01, 0x29, 0x91, 0xDB, 0x3B, 0xB9, 0x13, 0xF7, 0xC5, 0x82, 0xE1, 0xFD, 0xBF,
	0x8D, 0xB5, 0x4E, 0x26, 0xC0, 0xC3, 0x9A, 0x6C, 0x76, 0x2B, 0xFD, 0x13, 0x08, 0x6B, 0xD7, 0x9F,
	0xAD, 0xD5, 0xF9, 0xB4, 0xEA, 0x43, 0xA3, 0x80, 0x26, 0x23, 0xB9, 0xD5, 0xB3, 0x02, 0x2E, 0xE3,
	0x4A, 0x5E, 0xF6, 0xB5, 0x03, 0x6E, 0x66, 0x12, 0xA5, 0x3B, 0xED, 0xD5, 0x97, 0x09, 0x17, 0x0B,
	0x00, 0x0A, 0xF7, 0x10, 0x10, 0xF1, 0xDD, 0xF5, 0xB3, 0xBB, 0x4B, 0x0B, 0x44, 0x87, 0x1D, 0xB2,
	0x11, 0xD9, 0x83, 0xC9, 0x04, 0xBD, 0x1B, 0x6B, 0xE6, 0x2E, 0x35, 0xFA, 0x92, 0x28, 0xBB, 0x17,
	0xEE, 0x53, 0xC7, 0xEE, 0x68, 0xE6, 0xC7, 0xED, 0x81, 0x9F, 0x65, 0x55, 0xF1, 0x9A, 0x6E, 0xD8,
	0x75, 0x4B, 0x51, 0x1F, 0x8F, 0x23, 0x09, 0xA1, 0x97, 0xA9, 0x69, 0x7A, 0xA0, 0x48, 0xCA, 0x41,
	0xF5, 0x75, 0xB7, 0x1D, 0x70, 0x92, 0x1C, 0x16, 0x66, 0x3F, 0xC5, 0x2B, 0x1D, 0x62, 0x8D, 0x06,
	0x00, 0x0F, 0x02, 0xA7, 0xC2, 0x7F, 0xA0, 0xF7, 0x93, 0xF0, 0xA4, 0xE0, 0x68, 0x99, 0x02, 0xE6,
	0x49, 0x31, 0x29, 0x44, 0x16, 0xD2, 0x14, 0x61, 0x7D, 0x49, 0x2E, 0x9F, 0x15, 0x4A, 0x7D, 0x8F,
	0xB3, 0x20, 0x82, 0x84, 0xB1, 0xED, 0x46, 0x4E, 0x2D, 0xE9, 0xA3, 0x18, 0x50, 0xBB, 0x2F, 0xC6,
	0x24, 0x8A, 0x04, 0x87, 0x23, 0x02, 0x71, 0x3F, 0xC7, 0xE1, 0xDB, 0x7F, 0x01, 0x31, 0xEF, 0x48,
	0xC1, 0x5B, 0x82, 0x08, 0x38, 0xE5, 0x83, 0x22, 0xC7, 0xD2, 0xD9, 0x74, 0x15, 0xC6, 0x4C, 0xD6,
	0x00, 0x04, 0x9F, 0x7E, 0x8E, 0x38, 0xA6, 0xD0, 0xB2, 0xB8, 0xDF, 0x88, 0x48, 0x1D, 0x43, 0x11,
	0x07, 0xF5, 0xD5, 0x53, 0x35, 0x9A, 0xEA, 0x6C, 0x1E, 0x75, 0x96, 0xD4, 0x17, 0x91, 0x51, 0x99,
	0x79, 0x3A, 0xDE, 0x36, 0x81, 0x5B, 0x30, 0xBC, 0x75, 0x1D, 0x52, 0xB4, 0x99, 0x7E, 0x96, 0x5B,
	0x80, 0x73, 0x1E, 0x61, 0xD4, 0x99, 0xE1, 0xD3, 0x6D, 0xA2, 0x99, 0x0A, 0x7A, 0xC4, 0x94, 0x16,
	0x8C, 0x36, 0x33, 0xAE, 0xEA, 0x4A, 0x0D, 0x2F, 0x50, 0x2A, 0x2E, 0x76, 0xB9, 0x13, 0xE3, 0x44,
	0x00, 0x05, 0x88, 0xD3, 0xB8, 0x8C, 0xA6, 0xEF, 0x62, 0x5D, 0x1F, 0xE6, 0x36, 0xC9, 0xAB, 0xA6,
	0x60, 0x1B, 0xE8, 0x9E, 0xF0, 0x8C, 0x45, 0xDE, 0xF0, 0x3B, 0xA3, 0x02, 0xE7, 0xA0, 0x48, 0xC6,
	0xAA, 0x69, 0x85, 0x13, 0xA1, 0x61, 0x37, 0xB7, 0x7A, 0x2E, 0x5C, 0x25, 0xE4, 0x87, 0xD1, 0x0A,
	0x7B, 0xA9, 0x5B, 0x1A, 0x10, 0xEE, 0xDD, 0x57, 0xD8, 0x44, 0x73, 0x78, 0xF2, 0x8C, 0xE6, 0xD7,
	0xCF, 0xBD, 0xB0, 0x9E, 0x6A, 0xF7, 0x6C, 0xBC, 0x25, 0xE8, 0x81, 0x89, 0x3F, 0x7C, 0xC4, 0x8F,
	0x00, 0x00, 0x83, 0x2A, 0x19, 0xE2, 0x33, 0xC3, 0x93, 0xB6, 0x9C, 0x28, 0x87, 0x30, 0x78, 0x3D,
	0x57, 0xB8, 0x63, 0xD2, 0x6D, 0x5D, 0x34, 0xFB, 0x30, 0x85, 0x6A, 0x5B, 0x69, 0x36, 0xD8, 0x78,
	0x45, 0x24, 0x2E, 0x47, 0x35, 0x1E, 0x01, 0xBF, 0x6E, 0xCD, 0x3A, 0xE7, 0xD2, 0x82, 0xE3, 0xF8,
	0x13, 0x89, 0x23, 0xD6, 0x1A, 0xB1, 0x88, 0x11, 0x37, 0x45, 0x9E, 0xB5, 0xED, 0x4E, 0xB9, 0x80,
	0x0A, 0x7F, 0x4B, 0x95, 0x47, 0x32, 0x0D, 0x8A, 0xDA, 0x62, 0xB6, 0x9D, 0x0E, 0x20, 0x10, 0x42,
	0x00, 0x03, 0x91, 0xC2, 0x93, 0x5B, 0xE0, 0xA2, 0xDC, 0xAB, 0xD7, 0x90, 0x94, 0xE7, 0x86, 0x92,
	0x0D, 0x72, 0x07, 0x12, 0x84, 0x2E, 0x90, 0xA0, 0x61, 0xF3, 0xC8, 0xE0, 0x6C, 0x47, 0x79, 0xEB,
	0xFC, 0x2D, 0x0C, 0x7B, 0x2B, 0x34, 0x8C, 0x88, 0xBB, 0xB4, 0x29, 0x92, 0xB1, 0x7F, 0x16, 0x72,
	0x71, 0x6E, 0x34, 0x91, 0x79, 0xA5, 0x43, 0x32, 0x0D, 0xCA, 0xB3, 0xE2, 0xBE, 0x73, 0x22, 0x74,
	0xFA, 0x67, 0x26, 0xE1, 0x7E, 0x65, 0xC4, 0xF6, 0x8D, 0xE6, 0x4C, 0x97, 0x03, 0x78, 0x29, 0x17,
	0x00, 0x0C, 0x10, 0x63, 0x00, 0x79, 0x5A, 0x6A, 0x50, 0x05, 0x4D, 0xB5, 0xB7, 0x4B, 0xB4, 0x62,
	0xC6, 0x7F, 0x5D, 0x10, 0x6C, 0xDD, 0xEA, 0x97, 0xCE, 0xFE, 0x13, 0xEC, 0xD6, 0x05, 0x8C, 0xF6,
	0x10, 0xEF, 0x05, 0xD3, 0x19, 0xA1, 0x8F, 0xAD, 0x98, 0xB1, 0x4B, 0x1F, 0xC1, 0xD4, 0x7C, 0x83,
	0xF8, 0xA2, 0x2D, 0x0C, 0x38, 0xA0, 0x7A, 0xDB, 0x8E, 0x44, 0xD9, 0x4B, 0x32, 0x0E, 0xE2, 0xDD,
	0x28, 0x39, 0x62, 0xD6, 0xB3, 0xFA, 0xD4, 0x35, 0x20, 0xB3, 0xD2, 0x7F, 0xB7, 0x76, 0x3A, 0x4D,
	0x00, 0x05, 0xFC, 0x4D, 0x03, 0x30, 0xBF, 0xA1, 0x6D, 0x61, 0x26, 0xAD, 0x8E, 0x5E, 0xD2, 0xBE,
	0xB2, 0xD3, 0x09, 0x10, 0x06, 0xB4, 0x34, 0x91, 0xA2, 0x45, 0x86, 0x7E, 0x8C, 0xD0, 0x22, 0xAA,
	0x1F, 0x3F, 0xF4, 0xC2, 0x85, 0xF0, 0x80, 0x4B, 0x46, 0x11, 0xBC, 0x38, 0xB6, 0x05, 0x2A, 0xAD,
	0x0E, 0x63, 0x41, 0xA4, 0x13, 0xDB, 0x35, 0x1E, 0xD5, 0x80, 0x67, 0xCD, 0xD8, 0xB9, 0x6D, 0x76,
	0x1E, 0x57, 0xDA, 0xB2, 0xDF, 0xB3, 0x32, 0xAA, 0xDC, 0x08, 0x8C, 0x20, 0x8B, 0xB2, 0x5D, 0x2D,
	0x00, 0x0E, 0x6E, 0xD4, 0xE6, 0x0C, 0xA1, 0x4C, 0x04, 0x44, 0xB8, 0xB2, 0xEF, 0x03, 0x34, 0x4B,
	0xED, 0x77, 0x5E, 0x28, 0x2A, 0x54, 0xE8, 0x9D, 0x77, 0x9A, 0xC9, 0x64, 0x40, 0x78, 0x00, 0xC2,
	0x02, 0x59, 0xA4, 0xAF, 0x81, 0x7B, 0xA9, 0xD2, 0xCD, 0xBF, 0x78, 0xD2, 0xBC, 0x0F, 0x2D, 0x29,
	0x24, 0x91, 0x80, 0xE0, 0x18, 0x15, 0x8B, 0xB7, 0xFA, 0xAD, 0x30, 0x87, 0x3D, 0x88, 0x69, 0x2B,
	0x03, 0x57, 0x6B, 0x2B, 0x32, 0xEE, 0x23, 0xB0, 0x77, 0x1C, 0x8B, 0x31, 0x9A, 0x97, 0xE6, 0x7A,
	0x00, 0x0D, 0xC8, 0x1E, 0x9D, 0x19, 0x46, 0x6D, 0xE7, 0x44, 0xA1, 0xC8, 0x71, 0xC2, 0xDA, 0x53,
	0x3E, 0xD9, 0x6B, 0xBA, 0x07, 0x9B, 0x88, 0xBA, 0x87, 0xC2, 0xB4, 0xC3, 0xA2, 0x46, 0x75, 0x25,
	0x9A, 0x48, 0xF8, 0x86, 0x2D, 0x61, 0xB6, 0x35, 0xDD, 0x89, 0x8A, 0x20, 0xC6, 0x93, 0x48, 0xAD,
	0x9E, 0xC9, 0xE7, 0x63, 0xEF, 0x35, 0x63, 0x9A, 0x0B, 0x83, 0xF8, 0xF5, 0xB8, 0x7E, 0x80, 0x77,
	0x21, 0xAA, 0xF3, 0xF2, 0x61, 0xA1, 0xF5, 0x58, 0x7C, 0xDE, 0x24, 0x69, 0xFC, 0x7E, 0x81, 0x13,
	0x00, 0x0B, 0x64, 0xB4, 0x08, 0x85, 0x92, 0x1E, 0x19, 0xBC, 0x16, 0x6B, 0x69, 0xBC, 0x69, 0x5F,
	0xD6, 0x8D, 0x70, 0x77, 0x8B, 0xEA, 0x06, 0xCE, 0xAE, 0x8C, 0x2D, 0x3A, 0xCE, 0xAA, 0x68, 0xF6,
	0x8A, 0x8F, 0x10, 0x64, 0xDC, 0x35, 0x69, 0xB2, 0x33, 0x1B, 0x49, 0xB3, 0x3D, 0xEA, 0x34, 0x0F,
	0x2E, 0x7B, 0xB2, 0xBE, 0xE9, 0xA0, 0x31, 0x62, 0xB5, 0x79, 0x28, 0x26, 0x80, 0x4D, 0x23, 0x24,
	0x09, 0xE0, 0x0E, 0xAF, 0x8E, 0xD0, 0x0D, 0xD7, 0xB0, 0x6B, 0x23, 0x35, 0x59, 0x52, 0x90, 0x4C,
	0x00, 0x15, 0x2A, 0xC6, 0x52, 0x5D, 0x84, 0xB0, 0x2E, 0x53, 0x70, 0xB5, 0xDA, 0xA1, 0x88, 0x9D,
	0x1C, 0x84, 0x6B, 0xD1, 0x61, 0x1B, 0x4A, 0xE7, 0x23, 0x09, 0xB6, 0xE4, 0xFD, 0x1A, 0x0E, 0x9E,
	0x32, 0x41, 0xE6, 0xC3, 0x74, 0x02, 0x07, 0xB0, 0x8E, 0x2F, 0x4B, 0x70, 0x6E, 0xAF, 0xE1, 0x61,
	0x85, 0x8F, 0x0A, 0xEB, 0x3D, 0x08, 0x67, 0x85, 0x72, 0x03, 0x65, 0x89, 0xF8, 0xE4, 0x4C, 0xA0,
	0x65, 0x93, 0x33, 0x04, 0x4D, 0xE3, 0x55, 0x6E, 0x6B, 0xAF, 0xFE, 0x9F, 0x1B, 0x1F, 0x4E, 0xC5,
	0x00, 0x0D, 0x88, 0xFE, 0x34, 0xAD, 0xFB, 0xFB, 0x5F, 0xAA, 0x33, 0x2B, 0xF8, 0xA7, 0xDA, 0x4F,
	0x7B, 0x73, 0x8A, 0x60, 0x07, 0xD2, 0x89, 0x81, 0x4C, 0x69, 0x2B, 0x11, 0x43, 0x59, 0x6F, 0x2E,
	0x8D, 0xE8, 0xEF, 0x7E, 0x7D, 0x7C, 0x3C, 0x86, 0xAF, 0x93, 0xF4, 0xF1, 0xCD, 0x98, 0xF6, 0x07,
	0xEF, 0x1C, 0x1B, 0xB2, 0x59, 0x06, 0xC9, 0xC5, 0x5A, 0x2F, 0x28, 0x62, 0xF1, 0x4F, 0xE7, 0x2D,
	0x0E, 0x9A, 0xEB, 0x36, 0x91, 0x5C, 0x3E, 0xD9, 0xA3, 0x82, 0x38, 0x5F, 0x65, 0x6B, 0xA2, 0xD9,
	0x00, 0x01, 0xDE, 0x19, 0xE2, 0x8D, 0x12, 0x3D, 0xC5, 0x43, 0xBF, 0xB1, 0x60, 0x3D, 0x02, 0x9C,
	0xC6, 0xD2, 0x34, 0x55, 0x85, 0x82, 0xF8, 0x86, 0x44, 0xF5, 0x17, 0xD0, 0xCF, 0xCF, 0xD9, 0x15,
	0xE2, 0xE7, 0x41, 0x2A, 0xFA, 0x14, 0x84, 0x6F, 0x14, 0xAC, 0x5F, 0xCA, 0x30, 0x7B, 0x18, 0xFD,
	0x95, 0xE5, 0x5A, 0xD2, 0x34, 0x85, 0x3A, 0xB0, 0xE1, 0xD8, 0xD2, 0x0D, 0x1F, 0x77, 0x4E, 0x2E,
	0x1C, 0x1A, 0x56, 0x78, 0xC8, 0x45, 0x3C, 0xAF, 0x3E, 0x59, 0x1C, 0x70, 0x48, 0xF5, 0x3C, 0x0F,
	0x00, 0x02, 0x6D, 0xE6, 0xB8, 0xCA, 0x1C, 0x90, 0x2E, 0xAB, 0x20, 0x2B, 0x94, 0xB4, 0xF9, 0x42,
	0x61, 0x1E, 0x97, 0x49, 0x0C, 0x76, 0xC7, 0x61, 0x0A, 0x2C, 0x1C, 0xA0, 0x03, 0x07, 0x38, 0x55,
	0x04, 0x68, 0x10, 0xAB, 0xD2, 0x43, 0x16, 0x89, 0x1F, 0x41, 0x27, 0x68, 0xF2, 0x78, 0xFC, 0x5D,
	0x22, 0x83, 0xD9, 0xF3, 0xBB, 0x52, 0xE9, 0x9A, 0x52, 0xFC, 0xB3, 0x44, 0x4D, 0xCF, 0xF1, 0x59,
	0xA8, 0xDE, 0x02, 0x32, 0x40, 0xBD, 0x59, 0x14, 0x24, 0x4F, 0x6B, 0x50, 0x32, 0xD3, 0x01, 0xD5,
	0x00, 0x08, 0xE2, 0x6A, 0xBB, 0x66, 0x69, 0x59, 0xEC, 0xFB, 0x71, 0x79, 0xFD, 0x79, 0xF6, 0xCB,
	0xED, 0x43, 0x08, 0xAE, 0x99, 0xD8, 0x6B, 0xEF, 0x3A, 0xC0, 0xBD, 0x89, 0x2B, 0xC9, 0x24, 0xEB,
	0x69, 0xF6, 0xDC, 0x82, 0x99, 0x17, 0xA1, 0x45, 0x51, 0x9B, 0x3C, 0x53, 0x3D, 0x65, 0xA9, 0xB9,
	0xD3, 0x41, 0x08, 0xCA, 0xC7, 0xEA, 0x5B, 0x2A, 0xA4, 0xB4, 0x3A, 0x7B, 0x6A, 0x5F, 0xD3, 0xDD,
	0x7F, 0x03, 0x5A, 0x68, 0x85, 0xCA, 0x7C, 0x04, 0x12, 0xFB, 0x6F, 0xA5, 0x74, 0x10, 0x1B, 0x43,
	0x00, 0x07, 0x57, 0x7E, 0x6B, 0x1B, 0x48, 0x5F, 0xF2, 0x69, 0x28, 0x94, 0x31, 0xD9, 0x28, 0x54,
	0x3D, 0x97, 0x70, 0xEA, 0x9A, 0x8A, 0x55, 0x25, 0x15, 0x30, 0x48, 0x04, 0xF6, 0x43, 0x03, 0x6B,
	0xAE, 0xDF, 0xC2, 0x30, 0xE8, 0x33, 0xFE, 0x73, 0x46, 0x8E, 0x4A, 0x6D, 0xCF, 0x1E, 0x59, 0x46,
	0x93, 0xBD, 0x08, 0x38, 0x31, 0x0C, 0xC2, 0x06, 0x39, 0x19, 0x27, 0x1B, 0xB9, 0x07, 0x7E, 0x8D,
	0x83, 0xF6, 0x69, 0xB4, 0xB1, 0x7E, 0xED, 0x0D, 0xF1, 0x3B, 0x0A, 0x2F, 0x8F, 0x75, 0x39, 0x2B,
	0x00, 0x12, 0x3E, 0x0F, 0x0C, 0x95, 0xC9, 0x90, 0x72, 0xBE, 0xCC, 0xF8, 0x49, 0x9B, 0x6D, 0x67,
	0xF6, 0x11, 0x61, 0xC4, 0x7A, 0x6B, 0x50, 0xAB, 0xAF, 0xFF, 0xA2, 0x21, 0x71, 0x7A, 0x5A, 0x28,
	0x70, 0x8A, 0x6E, 0xDC, 0x4A, 0xC5, 0xAC, 0xF7, 0xEF, 0xAA, 0xB6, 0x8A, 0x60, 0x6C, 0x3C, 0xE8,
	0x38, 0xAB, 0x99, 0x24, 0x0A, 0xE7, 0xE3, 0xB3, 0x3A, 0x18, 0x9E, 0x0B, 0x92, 0x16, 0xB7, 0x28,
	0xE9, 0xEC, 0x1A, 0x6A, 0xB1, 0xE7, 0x68, 0xAC, 0x48, 0xE2, 0x07, 0x05, 0x25, 0x7D, 0x56, 0x77,
	0x00, 0x09, 0x5E, 0xF3, 0x5A, 0x94, 0x34, 0xE7, 0xAA, 0xA8, 0x6D, 0x4A, 0x88, 0x56, 0x94, 0xB6,
	0x95, 0x63, 0xA4, 0x0D, 0xC3, 0xFC, 0xB0, 0x61, 0x03, 0xD9, 0x1B, 0xB0, 0xEB, 0xCD, 0xA6, 0x7E,
	0xC5, 0x7F, 0xB1, 0x43, 0x61, 0x87, 0x25, 0x1E, 0x3E, 0xB0, 0xA7, 0xA6, 0xBF, 0x00, 0x3D, 0x55,
	0xAB, 0x2F, 0x7A, 0x53, 0x8C, 0x82, 0x4A, 0x50, 0xC1, 0xE4, 0x51, 0x4C, 0x66, 0x41, 0x46, 0x34,
	0x4E, 0xF0, 0x68, 0xA8, 0xA8, 0x95, 0xBF, 0xCC, 0x25, 0x6F, 0xFC, 0xD9, 0x29, 0x4A, 0x3A, 0x93,
	0x00, 0x02, 0xD4, 0x15, 0x5A, 0xA0, 0x7C, 0x72, 0x1E, 0x36, 0x98, 0xF1, 0x0A, 0xFA, 0x94, 0x59,
	0x69, 0x4B, 0x47, 0xA0, 0x0C, 0x1E, 0x20, 0x22, 0x53, 0x98, 0x25, 0x42, 0x51, 0x8C, 0xEC, 0x54,
	0xF4, 0x9E, 0x6B, 0xAD, 0xEA, 0x5C, 0x8D, 0x49, 0xE4, 0x69, 0xFC, 0x08, 0x84, 0x5E, 0xDD, 0xD5,
	0x54, 0xF0, 0x92, 0x00, 0x28, 0x7B, 0xBA, 0x03, 0x95, 0xD4, 0x7D, 0x8A, 0x59, 0x3C, 0x25, 0x1F,
	0xA4, 0x5F, 0x8B, 0xBD, 0x1E, 0x16, 0x26, 0x32, 0x6E, 0xD6, 0xB9, 0x92, 0x86, 0x10, 0xB5, 0x73,
	0x00, 0x0D, 0xC9, 0xB6, 0x30, 0xF4, 0xDE, 0xF1, 0x2B, 0xF6, 0x5F, 0x76, 0x5F, 0x96, 0x4C, 0x87,
	0x28, 0x58, 0xAA, 0x9C, 0x22, 0x00, 0x1E, 0xE8, 0xE2, 0x1F, 0x7D, 0xFC, 0x40, 0x43, 0x5A, 0x54,
	0x13, 0xA3, 0xAE, 0xC7, 0x5F, 0xBA, 0x1C, 0x73, 0xF4, 0x12, 0x2D, 0xEF, 0x60, 0xAA, 0x80, 0xF3,
	0x2D, 0x9D, 0xD9, 0xD1, 0x78, 0x53, 0xAE, 0x30, 0x43, 0xBC, 0x3E, 0xC1, 0xB8, 0xCD, 0x65, 0xD3,
	0x1A, 0x19, 0x47, 0x83, 0x24, 0x92, 0xAB, 0x1A, 0x83, 0x39, 0xA1, 0xAA, 0x87, 0x4F, 0x6A, 0xBE,
	0x00, 0x13, 0xAB, 0xD8, 0xD8, 0xC3, 0xFC, 0x65, 0x22, 0xBD, 0xF7, 0xB8, 0x15, 0xC5, 0xA1, 0xEC,
	0x43, 0xB7, 0xB4, 0x07, 0x17, 0xC2, 0x3A, 0x5D, 0x60, 0x0B, 0x2A, 0x89, 0x70, 0xD0, 0xB8, 0x07,
	0xF0, 0xA2, 0x61, 0x80, 0x8F, 0x10, 0xF6, 0x2D, 0x6C, 0xA7, 0x58, 0x17, 0xEB, 0x6F, 0x0E, 0x00,
	0x58, 0x49, 0x71, 0xE1, 0x34, 0x8F, 0x4D, 0x87, 0x59, 0xFD, 0xAA, 0xD7, 0x3F, 0x96, 0xBB, 0x7F,
	0x44, 0x50, 0x93, 0xA2, 0x43, 0x77, 0x9B, 0x99, 0xFA, 0x40, 0x72, 0x63, 0xA8, 0xDD, 0x70, 0xFF,
	0x00, 0x0B, 0x9E, 0xF7, 0xAD, 0xD3, 0xDE, 0x9A, 0xFB, 0xD2, 0xBF, 0xEB, 0x31, 0x26, 0x08, 0xAA,
	0xFC, 0x3B, 0x2B, 0x71, 0x30, 0x19, 0x59, 0x22, 0x30, 0xE4, 0x99, 0x64, 0xBD, 0x21, 0x33, 0xFF,
	0xDB, 0x43, 0x34, 0x47, 0x8A, 0x85, 0x18, 0xB0, 0x8A, 0x57, 0xE1, 0xAB, 0x87, 0xB3, 0xE1, 0x91,
	0x1A, 0xE8, 0x78, 0x18, 0x03, 0xE4, 0x50, 0x92, 0x5A, 0x51, 0x1C, 0x6D, 0xAB, 0xE4, 0x01, 0x81,
	0xD4, 0x0D, 0x32, 0x64, 0x1F, 0x13, 0xC6, 0xAB, 0x49, 0xA2, 0x21, 0xDE, 0x7B, 0x65, 0x19, 0xCC
};

void blsSetup_test()
{
	blsSysPara sysPara;
	blsSetup(byte_g1, byte_g2, byte_gt, sysPara);
	cout << "g1 = " << endl;
	G1Print(sysPara.g1);
	cout << "g2 = " << endl;
	G2Print(sysPara.g2);
	cout << "gt = " << endl;
	GTPrint(sysPara.gt);
}

void blsKGen_test()
{
	blsSysPara sysPara;
	Big sk; 
	G2 PK;
	blsSetup(byte_g1, byte_g2, byte_gt, sysPara);
	blsKGen(sysPara, sk, PK);
	cout << "sk = " << sk << endl;
	cout << "PK= " << endl;
	G2Print(PK);
}

void HashToPoint_test()
{
	int msgByteLen;
	G1 hash;
	char* msg = (char *) "B09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2D09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A5";
	BYTE msgBYTE[MAXCHARSIZE];
	byteReset(msgBYTE, MAXCHARSIZE);
	charToByte(msg, strlen(msg), msgBYTE, msgByteLen);
	
	HashToG1(msgBYTE, hash);
	G1Print(hash);
}


void blsSign_test()
{
	int msgByteLen;
	G1 hash;
	G1 sig;
	blsSysPara sysPara;
	Big sk;
	G2 PK;
	char* msg = (char *) "B09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2D09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A5";
	BYTE msgBYTE[MAXCHARSIZE];
	byteReset(msgBYTE, MAXCHARSIZE);
	charToByte(msg, strlen(msg), msgBYTE, msgByteLen);
	blsSetup(byte_g1, byte_g2, byte_gt, sysPara);
	blsKGen(sysPara, sk, PK);
	blsSign(sysPara, sk, msgBYTE, sig);
	cout << "The Signature is: " << endl;
	G1Print(sig);
}

void blsVerf_test()
{
	LARGE_INTEGER freq;
	LARGE_INTEGER start_t, stop_t;
	double exe_time = 0;
	time_t seed;

	int msgByteLen;
	G1 hash;
	G1 sig;

	blsSysPara sysPara;
	Big sk;
	G2 PK;
	time(&seed);
	irand((long)seed);   /* change parameter for different values */
	int cnt = 1;
	char* msg = (char *) "B09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2D09A20654ADEFAA07C80512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A5";
	BYTE msgBYTE[MAXCHARSIZE];
	byteReset(msgBYTE, MAXCHARSIZE);
	charToByte(msg, strlen(msg), msgBYTE, msgByteLen);
	QueryPerformanceFrequency(&freq);
	exe_time = 0;
	for (int k = 0; k < cnt; k++)
	{
		QueryPerformanceCounter(&start_t);
		blsSetup(byte_g1, byte_g2, byte_gt, sysPara);
		QueryPerformanceCounter(&stop_t);
		exe_time += 1e3*(stop_t.QuadPart - start_t.QuadPart) / freq.QuadPart;
	}
	cout << "The time of blsSetup is: " << exe_time / cnt << endl;


	Big a, b, c, d, tmp;
	G1 A, B, C, A1, tmpG, tmpC;
	int t = 10;

	cout << "sysPara.g1 = " << endl;
	G1Print(sysPara.g1);

	while ( t >= 0)
	{
		pfc.random(a);
		pfc.random(b);
		pfc.random(d);
		A = pfc.mult(sysPara.g1, a);
		B = pfc.mult(sysPara.g1, b);

		tmp = modmult(b, d, pfc.order());
		c = (a + tmp) % pfc.order();

		C = pfc.mult(sysPara.g1, c);
		B = pfc.mult(B, d);
		tmpC = A + B;

		if (tmpC == C)
		{
			cout << "True!" << endl;

		}
		else
		{
			cout << "tmpC = " << endl;
			G1Print(tmpC);
			cout << "C = " << endl;
			G1Print(C);
		}
		t--;
	}


	QueryPerformanceFrequency(&freq);
	exe_time = 0;
	for (int k = 0; k < cnt; k++)
	{
		QueryPerformanceCounter(&start_t);
		blsKGen(sysPara, sk, PK);
		QueryPerformanceCounter(&stop_t);
		exe_time += 1e3*(stop_t.QuadPart - start_t.QuadPart) / freq.QuadPart;
	}
	cout << "The time of blsKGen is: " << exe_time / cnt << endl;
	
	QueryPerformanceFrequency(&freq); 
	exe_time = 0;
	for (int k = 0; k < cnt; k++)
	{
		QueryPerformanceCounter(&start_t);
		blsSign(sysPara, sk, msgBYTE, sig);
		QueryPerformanceCounter(&stop_t);
		exe_time += 1e3*(stop_t.QuadPart - start_t.QuadPart) / freq.QuadPart;
	}
	cout << "The time of blsSign is: " << exe_time / cnt << endl;

	if (!blsVerf(sysPara, PK, msgBYTE, sig))
	{
		cout << "Fails! " << endl;
	}
	QueryPerformanceFrequency(&freq);
	exe_time = 0;
	for (int k = 0; k < cnt; k++)
	{
		QueryPerformanceCounter(&start_t);
		blsVerf(sysPara, PK, msgBYTE, sig);
		QueryPerformanceCounter(&stop_t);
		exe_time += 1e3*(stop_t.QuadPart - start_t.QuadPart) / freq.QuadPart;
	}
	cout << "The time of blsVerf is: " << exe_time / cnt << endl;
	
	
}
